// Generated by generate_container_impl, dont move!
package container

import (
	"bytes"
	"text/template"

	"github.com/gopherjs/gopherjs/js"

	"github.com/PeerXu/jarvis3/container/compiler"
)

var CONTAINER_TEMPLATE = `package main

import (
	"github.com/gopherjs/gopherjs/js"

	e "{{.Executor.Path}}"
)

func main() {
	document := js.Global.Get("document")

	resBuf := document.Call("getElementById", "__JVS_RES_BUF_{{.Container.Code}}")
	errBuf := document.Call("getElementById", "__JVS_ERR_BUF_{{.Container.Code}}")
	doneBuf := document.Call("getElementById", "__JVS_DONE_BUF_{{.Container.Code}}")

	ctx := e.Constructor.ContextMaker()
	{{range $key, $val := .Container.Metadata}}
	ctx.Metadata().Set("{{$key}}", "{{$val}}")
	{{end}}
	ctx.Data().Set("{{.Container.Data}}")

	req := e.Constructor.RequestMaker(ctx)
	req.Data().Set("{{.Request.Data}}")

	exec := e.Constructor.ExecutorMaker()
	{{range $key, $val := .Executor.Metadata}}
	ctx.Metadata().Set("{{$key}}", "{{$val}}")
	{{end}}
	exec.Data().Set("{{.Executor.Data}}")

	res, err := exec.Execute(req)

	if err != nil {
		errBuf.Set("innerHTML", err.Error())
	}

	resBuf.Set("innerHTML", res.Data().Get())
	doneBuf.Set("innerHTML", "1")
}
`

type container struct {
	context Context
	code    string
}

func NewContainer(ctx Context) Container {
	var code_buf bytes.Buffer

	code_tmpl := template.Must(template.New("container").Parse(CONTAINER_TEMPLATE))
	code_tmpl.Execute(&code_buf, ctx)

	code, err := compiler.Compile(code_buf.String())
	if err != nil {
		panic(err)
	}

	return &container{
		context: ctx,
		code:    code,
	}
}

func (c *container) Run() error {
	f, err := c.RunAsync()
	if err != nil {
		return err
	}

	return f.Wait()
}

func (c *container) RunAsync() (Future, error) {
	document := js.Global.Get("document")
	body := document.Get("body")

	resBuf := document.Call("createElement", "div")
	resBuf.Set("id", "__JVS_RES_BUF_"+c.context.Container.Code)
	body.Call("appendChild", resBuf)
	errBuf := document.Call("createElement", "div")
	errBuf.Set("id", "__JVS_ERR_BUF_"+c.context.Container.Code)
	body.Call("appendChild", errBuf)
	doneBuf := document.Call("createElement", "div")
	doneBuf.Set("id", "__JVS_DONE_BUF_"+c.context.Container.Code)
	doneBuf.Set("innerHTML", "")
	body.Call("appendChild", doneBuf)

	f := NewFuture(c.context)

	go func() {
		js.Global.Set("$checkForDeadlock", true)
		js.Global.Call("eval", c.code)
	}()

	return f, nil
}

func (c *container) Close() {
	document := js.Global.Get("document")

	resBuf := document.Call("getElementById", "__JVS_RES_BUF_"+c.context.Container.Code)
	resBuf.Get("parentNode").Call("removeChild", resBuf)

	errBuf := document.Call("getElementById", "__JVS_ERR_BUF_"+c.context.Container.Code)
	errBuf.Get("parentNode").Call("removeChild", errBuf)

	doneBuf := document.Call("getElementById", "__JVS_DONE_BUF_"+c.context.Container.Code)
	doneBuf.Get("parentNode").Call("removeChild", doneBuf)
}
